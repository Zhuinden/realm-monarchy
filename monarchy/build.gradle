apply plugin: 'com.android.library'
apply plugin: 'realm-android'

apply plugin: 'maven-publish'

group = "com.github.Zhuinden.realm-monarchy"
version = "2.2.0"




android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 33
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api("com.google.code.findbugs:jsr305:3.0.2")
    api "androidx.lifecycle:lifecycle-livedata:2.6.1"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.16.1'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    androidTestImplementation 'junit:junit:4.13.2'
}

task javadoc(type: Javadoc) {
    configurations.implementation.canBeResolved(true)
    configurations.api.canBeResolved(true)

    failOnError false

    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    //destinationDir = file("../javadoc/")
    classpath += configurations.api
}

tasks.withType(Javadoc).all {
    enabled = false
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release
                artifact(sourcesJar)

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.github.Zhuinden'
                artifactId = 'realm-monarchy'
                version = '2.2.0'

                pom.withXml {
                    def dependenciesNode = (asNode().get("dependencies") as groovy.util.NodeList).get(0) as groovy.util.Node
                    def configurationNames = ["implementation", "api"]

                    configurationNames.forEach { configurationName ->
                        configurations[configurationName].allDependencies.forEach {
                            if (it.group != null && it.version != "unspecified") {
                                def dependencyNode = dependenciesNode.appendNode("dependency")
                                dependencyNode.appendNode("groupId", it.group)
                                dependencyNode.appendNode("artifactId", it.name)
                                dependencyNode.appendNode("version", it.version)
                                // dependencyNode.appendNode("scope", configurationName)
                            }
                        }
                    }

//                    def dependencyNode = dependenciesNode.appendNode("dependency")
//                    dependencyNode.appendNode("groupId", "com.github.Zhuinden")
//                    dependencyNode.appendNode("artifactId", "event-emitter")
//                    dependencyNode.appendNode("version", "1.3.0")
                }
            }
        }
    }
}